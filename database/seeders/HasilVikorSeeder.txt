<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Schema;

class HasilVikorSeeder extends Seeder
{
    public function run()
    {
        Schema::disableForeignKeyConstraints();
        DB::table('hasil_vikor')->truncate();
        Schema::enableForeignKeyConstraints();

        $criterias = DB::table('criterias')->get();
        $alternatifs = DB::table('alternatifs')->get();
        $penilaian = DB::table('penilaians')->get();

        $matrix = [];
        foreach ($alternatifs as $alt) {
            foreach ($criterias as $c) {
                $nilai = $penilaian->firstWhere(fn($p) => $p->id_alternatif == $alt->id && $p->id_criteria == $c->id);
                $matrix[$alt->id][$c->id] = $nilai->nilai ?? 0;
            }
        }

        // Step 1: Normalisasi
        $normalisasi = [];
        foreach ($criterias as $c) {
            $max = $alternatifs->max(fn($a) => $matrix[$a->id][$c->id]);
            $min = $alternatifs->min(fn($a) => $matrix[$a->id][$c->id]);

            foreach ($alternatifs as $a) {
                if ($max == $min) {
                    $normalisasi[$a->id][$c->id] = 0; // Hindari divide by zero
                } else {
                    if ($c->criteria_type === 'benefit') {
                        $normalisasi[$a->id][$c->id] = ($matrix[$a->id][$c->id] - $min) / ($max - $min);
                    } else {
                        $normalisasi[$a->id][$c->id] = ($max - $matrix[$a->id][$c->id]) / ($max - $min);
                    }
                }
            }
        }

        // Step 2: Terbobot
        $terbobot = [];
        foreach ($alternatifs as $a) {
            foreach ($criterias as $c) {
                $terbobot[$a->id][$c->id] = $normalisasi[$a->id][$c->id] * $c->weight;
            }
        }

        // Step 3: Hitung S dan R
        $Si = []; $Ri = [];
        foreach ($alternatifs as $a) {
            $s = 0;
            $r = 0;
            foreach ($criterias as $c) {
                $value = $terbobot[$a->id][$c->id];
                $s += $value;
                $r = max($r, $value);
            }
            $Si[$a->id] = $s;
            $Ri[$a->id] = $r;
        }

        // Step 4: Hitung Q
        $Smin = min($Si);
        $Smax = max($Si);
        $Rmin = min($Ri);
        $Rmax = max($Ri);
        $v = 0.5;

        $Qi = [];
        foreach ($alternatifs as $a) {
            $s_term = $Smax == $Smin ? 0 : ($Si[$a->id] - $Smin) / ($Smax - $Smin);
            $r_term = $Rmax == $Rmin ? 0 : ($Ri[$a->id] - $Rmin) / ($Rmax - $Rmin);
            $Qi[$a->id] = round($v * $s_term + (1 - $v) * $r_term, 5);
        }

        // Step 5: Ranking
        asort($Qi); // Qi kecil = lebih baik
        $ranking = 1;
        $results = [];
        foreach ($Qi as $id => $q) {
            $results[] = [
                'id_alternatif' => $id,
                'nilai_s' => $Si[$id],
                'nilai_r' => $Ri[$id],
                'nilai_q' => $q,
                'ranking' => $ranking++,
                'status' => $ranking <= 15 ? 'Lulus' : 'Tidak Lulus',
                'created_at' => now(),
                'updated_at' => now(),
            ];
        }

        DB::table('hasil_vikor')->insert($results);
    }
}
